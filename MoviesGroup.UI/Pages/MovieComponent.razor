@inject IMapper mapper

<section class="d-flex flex-wrap justify-content-evenly" id="cardContainer">
    @foreach (var movie in Service!.Movies)
    {
        <div class="card mb-3 mt-3 me-5" id="cardID">
            <div class="row g-0">
                <div class="col-md-4">
                    <img src="@movie.PictureURL" class="img-fluid rounded-start" alt="Movie cover goes here">
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <h5 class="card-title">@movie.Name</h5>
                        <p class="card-text">@movie.Description.Truncate(150)</p>
                    </div>
                </div>
            </div>
            <div class="d-flex card-footer bg-white g-0 justify-content-start mt-auto">
                <button class="btn btn-sm btn-success" @onclick="() => AddToCart(movie)"><i class="bi-cart"></i></button>
                <div class="d-flex flex-column ms-2 badge text-bg-light text-center rounded-0 fw-normal">
                    <span>@string.Join(", ", movie.Actors?.Select(actor => actor.Name))</span>
                </div>
                <div class="ms-2 badge text-bg-light text-center rounded-0 fw-normal">
                    {
                    <span>@movie.AgeLimit!.Limit</span>
                    }
                </div>
                <div class="ms-2 badge text-bg-light text-center rounded-0 fw-normal">
                    {
                    <span>@movie.StreamingService!.Name</span>
                    }
                </div>
                <div class="ms-2 badge text-bg-light text-center rounded-0 fw-normal">
                    {
                    <span>@movie.ReleaseYear!.Year</span>
                    }
                </div>
            </div>
        </div>
    }
</section>

@code {
    [CascadingParameter(Name = "Service")] public UIService? Service { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }

    // string GetActorNames(MovieGetDTO movie) =>
    //         string.Join(", ", movie.Actors?.Select(actor => actor.Name) ?? Enumerable.Empty<string>()); // Attempt after attempt at making a string method for listing names.

    async Task AddToCart(MovieGetDTO movie) // 24-02-22
    {
        //TODO: Spara flera produkter till shopping cart
        //TODO: Visa produkterna i shopping carten
        //TODO: Ta bort produkt från shopping cart
        var cartItem = mapper.Map<CartItemDTO>(movie);
        //cartItem.ActorsString = GetActorNames(movie); // But in the end, it's easier to just string.Join in the CartItem.
        cartItem.Actors = movie.Actors;
        cartItem.AgeLimit = movie.AgeLimit;
        cartItem.StreamingService = movie.StreamingService;
        cartItem.ReleaseYear = movie.ReleaseYear;
        Service!.CartItems.Add(cartItem);
        await Service!.SaveToStorage("CartItems", Service!.CartItems);
        await OnChange.InvokeAsync((cartItem));
        await OnChange.InvokeAsync(Service); 

        //await Storage.SetAsync("MyKey", product);
        //await Service!.SaveToStorage("MyKey", product);

        //var prod = await Storage.GetAsync<ProductGetDTO>("MyKey");
        //var prod = await Service!.ReadSingleStorage<ProductGetDTO>("MyKey");


        //await Storage.RemoveAsync("MyKey");
        //await Service!.RemoveFromStorage("MyKey");

        //var product = Service!.Products.Single(p => p.Id == id);
    }
}
