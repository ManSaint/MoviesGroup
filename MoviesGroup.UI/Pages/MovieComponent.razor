@inject IMapper mapper

<secttion>
@*     <h3>ProductComponent</h3> *@
</secttion>
[14:04] Alexander Sjolund
<section class="d-flex flex-wrap">

    @foreach (var movie in Service!.Movies)

    {

        <div class="card mb-3 mt-3 me-5" style="max-width: 440px; max-height: 340px;">

            <div class="row g-0">

                <div class="col-md-4">

                    <img src="@movie.PictureURL" class="img-fluid rounded-start" alt="...">

                </div>

                <div class="col-md-8">

                    <div class="card-body">

                        <h5 class="card-title">@movie.Name</h5>

                        <p class="card-text">@movie.Description.Truncate(300)</p>

                    </div>

                </div>

            </div>

            <div class="d-flex card-footer bg-white g-0 justify-content-start">

                <button class="btn btn-sm btn-success" @onclick="() => AddToCart(movie)"><i class="bi-cart"></i></button>

                <div class="ms-2 badge text-bg-light text-center rounded-0 fw-normal">

                    @foreach (var actor in movie.Actors!) // A loop is necessary to iterate through the List of Actors to find the names.

                    {

                        <span>@actor.Name</span>
                        // And then we can put out the names related to the production.

                    }

                </div>

            </div>

        </div>

    }

</section>

@code {
    [CascadingParameter(Name = "Service")] public UIService? Service { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }

    // void OnColorClick(MovieGetDTO product, ActorGetDTO color)
    // {
    //     product.Colors!.ForEach(c => c.IsSelected = false);
    //     color.IsSelected = true;
    // }

    // void OnSizeClick(ProductGetDTO product, SizeGetDTO size)
    // {
    //     product.Sizes!.ForEach(s => s.IsSelected = false);
    //     size.IsSelected = true;
    // }

    /*void OnColorClick1(int productId, int colorId) // Håll detta utkommenterat.
    {
        var product = Service!.Products.Single(p => p.Id == productId);
        product.Colors!.ForEach(c => c.IsSelected = false);
        var color = product.Colors.Single(c => c.Id == colorId);
        color.IsSelected = true;
    }*/


    async Task AddToCart(MovieGetDTO movie) // 24-02-22
    {
        //TODO: Spara flera produkter till shopping cart
        //TODO: Visa produkterna i shopping carten
        //TODO: Ta bort produkt från shopping cart
        var cartItem = mapper.Map<CartItemDTO>(movie);
        cartItem.Actor = movie.Actors!.FirstOrDefault();
        cartItem.AgeLimit = movie.AgeLimit;
        cartItem.StreamingService = movie.StreamingService;
        cartItem.ReleaseYear = movie.ReleaseYear;
        Service!.CartItems.Add(cartItem);
        await Service!.SaveToStorage("CartItems", Service!.CartItems);
        await OnChange.InvokeAsync(Service); 

        //await Storage.SetAsync("MyKey", product);
        //await Service!.SaveToStorage("MyKey", product);

        //var prod = await Storage.GetAsync<ProductGetDTO>("MyKey");
        //var prod = await Service!.ReadSingleStorage<ProductGetDTO>("MyKey");


        //await Storage.RemoveAsync("MyKey");
        //await Service!.RemoveFromStorage("MyKey");

        //var product = Service!.Products.Single(p => p.Id == id);
    }
}
